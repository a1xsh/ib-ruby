require 'account_helper'

shared_examples_for 'Received single id' do
  subject { IB::Connection.current.received[:NextValidId].first }

  after(:all) { clean_connection }

  it { expect( IB::Connection.current.received[:NextValidId]).to have_exactly(1).message }

  it 'receives next valid for Order placement' do
    expect( subject).to  be_an IB::Messages::Incoming::NextValidId
    expect( subject.local_id).to be_an Integer
    @id[:at_connect] ||= subject.local_id # just assign once
  end

	it { expect(  log_entries.join ).to match   /Got next valid order id/}
end

shared_examples_for 'Received single id after request' do
  subject { IB::Connection.current.received[:NextValidId].first }

  it_behaves_like 'Received single id'

  it 'no new id is generated by this request' do
    expect( subject.local_id).to eq @id[:at_connect]
  end

  it 'does not receive :OpenOrderEnd message' do
    expect( IB::Connection.current.received[:OpenOrderEnd]).to be_empty
  end

  it 'does not reconnect to server' do
      expect(  log_entries.join ).not_to match   /Connected to server, version: 137, connection time/
  end
end

describe 'Ids valid for Order placement', focus: true do

  before(:all) do
    verify_account
    ib = IB::Connection.new OPTS[:connection].merge(:logger => mock_logger)
    ib.wait_for :NextValidId, 3 # , :OpenOrderEnd
    @id = {} # Moving id between contexts. Feels dirty.
  end

  after(:all) { close_connection }

  context 'at connect' do

    it_behaves_like 'Received single id'


    it 'logs connection notification' do
      expect(  log_entries.join ).to match   /Connected to server, version: 137, connection time/
    end
  end # at connect

  context 'Requesting valid order id' do
    before(:all) do
			ib =  IB::Connection.current
      ib.send_message :RequestIds
      ib.wait_for :NextValidId
    end

    it_behaves_like 'Received single id after request'
  end # Requesting valid order ids

  context 'Requested number of valid ids is just silently ignored by TWS' do
    before(:all) do
			ib =  IB::Connection.current
      ib.send_message :RequestIds, :number => 5
      ib.wait_for :NextValidId
    end

    it_behaves_like 'Received single id after request'
  end # number of ids is silently ignored

end # Ids valid for Order placement

