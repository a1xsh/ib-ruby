#!/usr/bin/env ruby
#
# This script gets details for specific contract from IB

require 'bundler/setup'
require 'logger'
require 'yaml'
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'ib-ruby'
# Set log level
log.level = Logger::DEBUG #FATAL
include IB
# Definition of what we want market data for.  We have to keep track of what ticker id
# corresponds to what symbol ourselves, because the ticks don't include any other
# identifying information. The choice of ticker ids is, as far as I can tell, arbitrary.
market = {0 => IB::Symbols::Stocks[:wfc],
           1 => IB::Symbols::Stocks[:vxx],
           2 => IB::Symbols::Futures[:vix],
           3 => IB::Symbols::Futures[:ym],
           4 => IB::Symbols::Options[:ge20],
	   ### OSI-Notation is broken
#           5 => IB::Symbols::Options[:vix20],
#           6 => IB::Symbols::Options[:spy270],
#           7 => IB::Symbols::Options[:vxx40],
           8 => IB::Symbols::Forex[:eurusd],
	   ### Bonds are not actually not supported 
           # 8 => IB::Symbols::Bonds[:wag],
           9 => IB::Symbols::Stocks[:wrong]}

# Connect to IB TWS.
ib = Connection.new( :client_id => 11912, :port => 4002 ) do | gw| # 7496 # TWS
  # Subscribe to TWS alerts/errors and contract data end marker
  gw.subscribe(:Alert, :ContractDataEnd) { |msg| puts msg.to_human }

  # Now, subscribe to ContractData incoming events.  The code passed in the block
  # will be executed when a message of that type is received, with the received
  # message as its argument. In this case, we just print out the data.
  gw.subscribe(:ContractData, :BondContractData) do |msg| 
    puts msg.contract.to_human + "\n"
    puts "Attributes: "
    puts "\t"+ msg.contract.attributes.map{ |k,v|  "#{k} : #{v}" unless v.blank?  }.join("\n\t")
  end
end
ib.wait_for :NextValidOrderId


market.each_pair do |id, contract|
  puts "\nRequesting contract data #{id}: #{contract.description}"

  # Request Contract details for the symbols we're interested in. TWS will
  # respond with ContractData messages, which will be processed by the code above.
  ib.send_message :RequestContractData, :id => id, :contract => contract

  # Wait for IB to respond to our request
  ib.wait_for :ContractDataEnd, 5 #sec
  ib.clear_received :ContractDataEnd
end
