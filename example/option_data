#!/usr/bin/env ruby
#
# This script subscribes to market data for a list of Options

require 'bundler/setup'
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'ib-ruby'
require 'logger'
COUNT_OF_EVENTS =  20
# Definition of what we want market data for.  We have to keep track of what ticker id
# corresponds to what symbol ourselves, because the ticks don't include any other
# identifying information. The choice of ticker ids is, as far as I can tell, arbitrary.
market = {1 => IB::Symbols::Options[:ge20],
          2 => IB::Symbols::Options[:z750],
          3 => IB::Symbols::Options[:spy75],
          4 => IB::Symbols::Options[:aapl200]}


counter = 0

# First, connect to IB TWS. Arbitrary :client_id is used to identify your script
ib = IB::Connection.new( client_id: 1112)  do | gw| #, :port => 7496 # TWS

  ## Subscribe to TWS alerts/errors
  gw.subscribe(:Alert) { |msg| puts msg.to_human }

  # Subscribe to Ticker... events.  The code passed in the block will be executed when
  # any message of that type is received, with the received message as its argument.
  # In this case, we just print out the tick.
  #
  # (N.B. The description field is not from IB TWS. It is defined
  #  locally in forex.rb, and is just arbitrary text.)
  gw.subscribe(:TickPrice, :TickSize, :TickOption, :TickString) do |msg|
    what = @market[msg.ticker_id].description || @market[msg.ticker_id].osi
    puts "#{msg.ticker_id}: #{what}: #{msg.to_human}"
    counter =  counter + 1
    if counter == COUNT_OF_EVENTS
      puts "Cancelling market data subscription.."
      market.each_pair { |id, _| ib.send_message :CancelMarketData, :id => id }  
      puts "Generally, the TWS sends additional TickEvents after the subscription is cancelled ... \n\n"
      Thread.new do 
	sleep 1
	puts "\n******** Press <Enter> to quit *********\n\n"
      end
    end
  end
end

# Now we actually request market data for the symbols we're interested in.
#
# ### ticklist-values :  lib/ib/messages/outgoing/request_marketdata.rb 
market.each_pair do |id, contract|
  ib.send_message :RequestMarketData, :ticker_id => id, :contract => contract ,  tick_list: [100,101,106]
end

puts "\nSubscribed to market data"
puts "\n******** Press <Enter> to cancel subscriptions  *********\n\n"
STDIN.gets
puts "Cancelling market data subscription.."

market.each_pair { |id, contract| ib.send_message :CancelMarketData, :id => id }

puts "\n******** Press <Enter> to quit.. *********\n\n"
STDIN.gets
